#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --format sokol_impl --slang glsl330:glsl100:glsl300es:hlsl4:metal_macos -i samples/sample-effect.glsl -o samples/sample-effect.glsl.h

    Overview:

        Shader program 'effect':
            Get shader desc: effect_shader_desc(sg_query_backend());
            Vertex shader: effect_vs
                Attribute slots:
                    ATTR_effect_vs_coord = 0
            Fragment shader: effect_fs
                Uniform block 'effect_uniform':
                    C struct: effect_uniform_t
                    Bind slot: SLOT_effect_uniform = 0
                Image 'iChannel1':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_iChannel1 = 0
                Image 'iChannel0':
                    Type: SG_IMAGETYPE_2D
                    Component Type: SG_SAMPLERTYPE_FLOAT
                    Bind slot: SLOT_iChannel0 = 1


    Shader descriptor structs:

        sg_shader effect = sg_make_shader(effect_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'effect_vs':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_effect_vs_coord] = { ... },
                },
            },
            ...});

    Image bind slots, use as index in sg_bindings.vs_images[] or .fs_images[]

        SLOT_iChannel1 = 0;
        SLOT_iChannel0 = 1;

    Bind slot and C-struct for uniform block 'effect_uniform':

        effect_uniform_t effect_uniform = {
            .iVelocity = ...;
            .iPressure = ...;
            .iTime = ...;
            .iWarpiness = ...;
            .iRatio = ...;
            .iZoom = ...;
            .iLevel = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_effect_uniform, &SG_RANGE(effect_uniform));

*/
#include <stdint.h>
#include <stdbool.h>
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before sample-effect.glsl.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
const sg_shader_desc* effect_shader_desc(sg_backend backend);
#define ATTR_effect_vs_coord (0)
#define SLOT_iChannel1 (0)
#define SLOT_iChannel0 (1)
#define SLOT_effect_uniform (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct effect_uniform_t {
    float iVelocity[2];
    float iPressure;
    float iTime;
    float iWarpiness;
    float iRatio;
    float iZoom;
    float iLevel;
} effect_uniform_t;
#pragma pack(pop)
#if defined(SOKOL_SHDC_IMPL)
/*
    #version 330
    
    layout(location = 0) in vec4 coord;
    out vec2 fragUV;
    
    void main()
    {
        gl_Position = vec4(coord.xy, 0.0, 1.0);
        fragUV = coord.zw;
    }
    
*/
static const char effect_vs_source_glsl330[153] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6f,0x72,0x64,
    0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x72,0x61,0x67,0x55,
    0x56,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x78,
    0x79,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x72,0x61,0x67,0x55,0x56,0x20,0x3d,0x20,0x63,0x6f,0x6f,0x72,0x64,
    0x2e,0x7a,0x77,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform vec4 effect_uniform[2];
    uniform sampler2D iChannel1;
    uniform sampler2D iChannel0;
    
    in vec2 fragUV;
    layout(location = 0) out vec4 fragColor;
    
    float noise(vec2 p)
    {
        return texture(iChannel1, p).x;
    }
    
    void main()
    {
        vec2 _54 = (fragUV * vec2(effect_uniform[1].y, 1.0)) * effect_uniform[1].z;
        vec2 param = _54 - (effect_uniform[0].xy * effect_uniform[0].w);
        vec2 param_1 = _54 + vec2(noise(param) * effect_uniform[1].x);
        fragColor = vec4(mix(texture(iChannel0, fragUV).xyz, vec3(noise(param_1)), vec3(effect_uniform[0].z)), 1.0);
    }
    
*/
static const char effect_fs_source_glsl330[571] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x65,0x66,0x66,0x65,0x63,
    0x74,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x32,0x5d,0x3b,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x69,0x43,0x68,0x61,0x6e,0x6e,0x65,0x6c,0x31,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x69,0x43,0x68,
    0x61,0x6e,0x6e,0x65,0x6c,0x30,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,
    0x20,0x66,0x72,0x61,0x67,0x55,0x56,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,
    0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,
    0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x6e,0x6f,0x69,0x73,0x65,0x28,0x76,
    0x65,0x63,0x32,0x20,0x70,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,
    0x75,0x72,0x6e,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x69,0x43,0x68,0x61,
    0x6e,0x6e,0x65,0x6c,0x31,0x2c,0x20,0x70,0x29,0x2e,0x78,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x35,0x34,0x20,0x3d,0x20,0x28,0x66,0x72,
    0x61,0x67,0x55,0x56,0x20,0x2a,0x20,0x76,0x65,0x63,0x32,0x28,0x65,0x66,0x66,0x65,
    0x63,0x74,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x31,0x5d,0x2e,0x79,0x2c,
    0x20,0x31,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x65,0x66,0x66,0x65,0x63,0x74,0x5f,
    0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x31,0x5d,0x2e,0x7a,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x5f,
    0x35,0x34,0x20,0x2d,0x20,0x28,0x65,0x66,0x66,0x65,0x63,0x74,0x5f,0x75,0x6e,0x69,
    0x66,0x6f,0x72,0x6d,0x5b,0x30,0x5d,0x2e,0x78,0x79,0x20,0x2a,0x20,0x65,0x66,0x66,
    0x65,0x63,0x74,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x30,0x5d,0x2e,0x77,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x31,0x20,0x3d,0x20,0x5f,0x35,0x34,0x20,0x2b,0x20,0x76,0x65,0x63,0x32,
    0x28,0x6e,0x6f,0x69,0x73,0x65,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x20,0x2a,0x20,
    0x65,0x66,0x66,0x65,0x63,0x74,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x31,
    0x5d,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,
    0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x6d,0x69,0x78,0x28,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x69,0x43,0x68,0x61,0x6e,0x6e,0x65,0x6c,0x30,
    0x2c,0x20,0x66,0x72,0x61,0x67,0x55,0x56,0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x76,
    0x65,0x63,0x33,0x28,0x6e,0x6f,0x69,0x73,0x65,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,
    0x31,0x29,0x29,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x65,0x66,0x66,0x65,0x63,0x74,
    0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x30,0x5d,0x2e,0x7a,0x29,0x29,0x2c,
    0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 100
    
    attribute vec4 coord;
    varying vec2 fragUV;
    
    void main()
    {
        gl_Position = vec4(coord.xy, 0.0, 1.0);
        fragUV = coord.zw;
    }
    
*/
static const char effect_vs_source_glsl100[143] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x31,0x30,0x30,0x0a,0x0a,0x61,0x74,
    0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,0x6f,
    0x72,0x64,0x3b,0x0a,0x76,0x61,0x72,0x79,0x69,0x6e,0x67,0x20,0x76,0x65,0x63,0x32,
    0x20,0x66,0x72,0x61,0x67,0x55,0x56,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x63,
    0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x55,0x56,0x20,0x3d,
    0x20,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x7a,0x77,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 100
    precision mediump float;
    precision highp int;
    
    uniform highp vec4 effect_uniform[2];
    uniform highp sampler2D iChannel1;
    uniform highp sampler2D iChannel0;
    
    varying highp vec2 fragUV;
    
    highp float noise(highp vec2 p)
    {
        return texture2D(iChannel1, p).x;
    }
    
    void main()
    {
        highp vec2 _54 = (fragUV * vec2(effect_uniform[1].y, 1.0)) * effect_uniform[1].z;
        highp vec2 param = _54 - (effect_uniform[0].xy * effect_uniform[0].w);
        highp vec2 param_1 = _54 + vec2(noise(param) * effect_uniform[1].x);
        gl_FragData[0] = vec4(mix(texture2D(iChannel0, fragUV).xyz, vec3(noise(param_1)), vec3(effect_uniform[0].z)), 1.0);
    }
    
*/
static const char effect_fs_source_glsl100[644] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x31,0x30,0x30,0x0a,0x70,0x72,0x65,
    0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x65,
    0x66,0x66,0x65,0x63,0x74,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x32,0x5d,
    0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x69,0x43,0x68,0x61,0x6e,0x6e,
    0x65,0x6c,0x31,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x69,0x43,0x68,
    0x61,0x6e,0x6e,0x65,0x6c,0x30,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x79,0x69,0x6e,0x67,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x72,0x61,0x67,
    0x55,0x56,0x3b,0x0a,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x6e,0x6f,0x69,0x73,0x65,0x28,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x32,0x20,0x70,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,
    0x6e,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x28,0x69,0x43,0x68,0x61,
    0x6e,0x6e,0x65,0x6c,0x31,0x2c,0x20,0x70,0x29,0x2e,0x78,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x35,0x34,
    0x20,0x3d,0x20,0x28,0x66,0x72,0x61,0x67,0x55,0x56,0x20,0x2a,0x20,0x76,0x65,0x63,
    0x32,0x28,0x65,0x66,0x66,0x65,0x63,0x74,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x5b,0x31,0x5d,0x2e,0x79,0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x65,
    0x66,0x66,0x65,0x63,0x74,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x31,0x5d,
    0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,
    0x63,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x5f,0x35,0x34,0x20,0x2d,
    0x20,0x28,0x65,0x66,0x66,0x65,0x63,0x74,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x5b,0x30,0x5d,0x2e,0x78,0x79,0x20,0x2a,0x20,0x65,0x66,0x66,0x65,0x63,0x74,0x5f,
    0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x30,0x5d,0x2e,0x77,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x5f,0x35,0x34,0x20,0x2b,0x20,0x76,0x65,
    0x63,0x32,0x28,0x6e,0x6f,0x69,0x73,0x65,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x20,
    0x2a,0x20,0x65,0x66,0x66,0x65,0x63,0x74,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x5b,0x31,0x5d,0x2e,0x78,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x46,
    0x72,0x61,0x67,0x44,0x61,0x74,0x61,0x5b,0x30,0x5d,0x20,0x3d,0x20,0x76,0x65,0x63,
    0x34,0x28,0x6d,0x69,0x78,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x28,
    0x69,0x43,0x68,0x61,0x6e,0x6e,0x65,0x6c,0x30,0x2c,0x20,0x66,0x72,0x61,0x67,0x55,
    0x56,0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x6e,0x6f,0x69,
    0x73,0x65,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,0x29,0x2c,0x20,0x76,0x65,
    0x63,0x33,0x28,0x65,0x66,0x66,0x65,0x63,0x74,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,
    0x6d,0x5b,0x30,0x5d,0x2e,0x7a,0x29,0x29,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    
    layout(location = 0) in vec4 coord;
    out vec2 fragUV;
    
    void main()
    {
        gl_Position = vec4(coord.xy, 0.0, 1.0);
        fragUV = coord.zw;
    }
    
*/
static const char effect_vs_source_glsl300es[156] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x6f,
    0x6f,0x72,0x64,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x72,
    0x61,0x67,0x55,0x56,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,
    0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x63,0x6f,0x6f,0x72,
    0x64,0x2e,0x78,0x79,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x55,0x56,0x20,0x3d,0x20,0x63,0x6f,
    0x6f,0x72,0x64,0x2e,0x7a,0x77,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp vec4 effect_uniform[2];
    uniform highp sampler2D iChannel1;
    uniform highp sampler2D iChannel0;
    
    in highp vec2 fragUV;
    layout(location = 0) out highp vec4 fragColor;
    
    highp float noise(highp vec2 p)
    {
        return texture(iChannel1, p).x;
    }
    
    void main()
    {
        highp vec2 _54 = (fragUV * vec2(effect_uniform[1].y, 1.0)) * effect_uniform[1].z;
        highp vec2 param = _54 - (effect_uniform[0].xy * effect_uniform[0].w);
        highp vec2 param_1 = _54 + vec2(noise(param) * effect_uniform[1].x);
        fragColor = vec4(mix(texture(iChannel0, fragUV).xyz, vec3(noise(param_1)), vec3(effect_uniform[0].z)), 1.0);
    }
    
*/
static const char effect_fs_source_glsl300es[680] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x65,0x66,0x66,0x65,0x63,0x74,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x5b,0x32,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x69,0x43,0x68,
    0x61,0x6e,0x6e,0x65,0x6c,0x31,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x69,0x43,0x68,0x61,0x6e,0x6e,0x65,0x6c,0x30,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x72,0x61,0x67,0x55,0x56,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,0x69,0x67,0x68,0x70,
    0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,
    0x0a,0x0a,0x68,0x69,0x67,0x68,0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x6e,0x6f,
    0x69,0x73,0x65,0x28,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x70,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x74,
    0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x69,0x43,0x68,0x61,0x6e,0x6e,0x65,0x6c,0x31,
    0x2c,0x20,0x70,0x29,0x2e,0x78,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,0x67,
    0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x35,0x34,0x20,0x3d,0x20,0x28,0x66,
    0x72,0x61,0x67,0x55,0x56,0x20,0x2a,0x20,0x76,0x65,0x63,0x32,0x28,0x65,0x66,0x66,
    0x65,0x63,0x74,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x31,0x5d,0x2e,0x79,
    0x2c,0x20,0x31,0x2e,0x30,0x29,0x29,0x20,0x2a,0x20,0x65,0x66,0x66,0x65,0x63,0x74,
    0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x31,0x5d,0x2e,0x7a,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x20,0x3d,0x20,0x5f,0x35,0x34,0x20,0x2d,0x20,0x28,0x65,0x66,0x66,
    0x65,0x63,0x74,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x30,0x5d,0x2e,0x78,
    0x79,0x20,0x2a,0x20,0x65,0x66,0x66,0x65,0x63,0x74,0x5f,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x5b,0x30,0x5d,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x68,0x69,
    0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,
    0x20,0x3d,0x20,0x5f,0x35,0x34,0x20,0x2b,0x20,0x76,0x65,0x63,0x32,0x28,0x6e,0x6f,
    0x69,0x73,0x65,0x28,0x70,0x61,0x72,0x61,0x6d,0x29,0x20,0x2a,0x20,0x65,0x66,0x66,
    0x65,0x63,0x74,0x5f,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x5b,0x31,0x5d,0x2e,0x78,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x6d,0x69,0x78,0x28,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x69,0x43,0x68,0x61,0x6e,0x6e,0x65,0x6c,0x30,0x2c,0x20,0x66,
    0x72,0x61,0x67,0x55,0x56,0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x76,0x65,0x63,0x33,
    0x28,0x6e,0x6f,0x69,0x73,0x65,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,0x29,
    0x2c,0x20,0x76,0x65,0x63,0x33,0x28,0x65,0x66,0x66,0x65,0x63,0x74,0x5f,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x5b,0x30,0x5d,0x2e,0x7a,0x29,0x29,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    static float4 gl_Position;
    static float4 coord;
    static float2 fragUV;
    
    struct SPIRV_Cross_Input
    {
        float4 coord : TEXCOORD0;
    };
    
    struct SPIRV_Cross_Output
    {
        float2 fragUV : TEXCOORD0;
        float4 gl_Position : SV_Position;
    };
    
    #line 9 "samples/sample-effect.glsl"
    void vert_main()
    {
    #line 9 "samples/sample-effect.glsl"
        gl_Position = float4(coord.xy, 0.0f, 1.0f);
        fragUV = coord.zw;
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        coord = stage_input.coord;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.fragUV = fragUV;
        return stage_output;
    }
*/
static const char effect_vs_source_hlsl4[648] = {
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x72,
    0x61,0x67,0x55,0x56,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,
    0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6f,
    0x72,0x64,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,
    0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x72,0x61,0x67,0x55,
    0x56,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x53,0x56,0x5f,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x39,
    0x20,0x22,0x73,0x61,0x6d,0x70,0x6c,0x65,0x73,0x2f,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x2d,0x65,0x66,0x66,0x65,0x63,0x74,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,
    0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x39,0x20,0x22,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x73,0x2f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x2d,0x65,0x66,0x66,0x65,0x63,0x74,0x2e,
    0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x63,
    0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x2c,0x20,0x30,0x2e,0x30,0x66,0x2c,0x20,0x31,
    0x2e,0x30,0x66,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x55,0x56,
    0x20,0x3d,0x20,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x7a,0x77,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,
    0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x63,0x6f,0x6f,
    0x72,0x64,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,
    0x2e,0x63,0x6f,0x6f,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x72,0x74,
    0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,
    0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x55,
    0x56,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x55,0x56,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,
    0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
/*
    cbuffer effect_uniform : register(b0)
    {
        float2 _42_iVelocity : packoffset(c0);
        float _42_iPressure : packoffset(c0.z);
        float _42_iTime : packoffset(c0.w);
        float _42_iWarpiness : packoffset(c1);
        float _42_iRatio : packoffset(c1.y);
        float _42_iZoom : packoffset(c1.z);
        float _42_iLevel : packoffset(c1.w);
    };
    
    Texture2D<float4> iChannel1 : register(t0);
    SamplerState _iChannel1_sampler : register(s0);
    Texture2D<float4> iChannel0 : register(t1);
    SamplerState _iChannel0_sampler : register(s1);
    
    static float2 fragUV;
    static float4 fragColor;
    
    struct SPIRV_Cross_Input
    {
        float2 fragUV : TEXCOORD0;
    };
    
    struct SPIRV_Cross_Output
    {
        float4 fragColor : SV_Target0;
    };
    
    #line 38 "samples/sample-effect.glsl"
    float noise(float2 p)
    {
    #line 38 "samples/sample-effect.glsl"
        return iChannel1.Sample(_iChannel1_sampler, p).x;
    }
    
    #line 41 "samples/sample-effect.glsl"
    void frag_main()
    {
    #line 41 "samples/sample-effect.glsl"
        float2 _54 = (fragUV * float2(_42_iRatio, 1.0f)) * _42_iZoom;
        float2 param = _54 - (_42_iVelocity * _42_iTime);
        float2 param_1 = _54 + (noise(param) * _42_iWarpiness).xx;
        fragColor = float4(lerp(iChannel0.Sample(_iChannel0_sampler, fragUV).xyz, noise(param_1).xxx, _42_iPressure.xxx), 1.0f);
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        fragUV = stage_input.fragUV;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.fragColor = fragColor;
        return stage_output;
    }
*/
static const char effect_fs_source_hlsl4[1473] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x65,0x66,0x66,0x65,0x63,0x74,0x5f,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,
    0x72,0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x5f,0x34,0x32,0x5f,0x69,0x56,0x65,0x6c,0x6f,0x63,0x69,0x74,0x79,
    0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x34,0x32,
    0x5f,0x69,0x50,0x72,0x65,0x73,0x73,0x75,0x72,0x65,0x20,0x3a,0x20,0x70,0x61,0x63,
    0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x2e,0x7a,0x29,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x34,0x32,0x5f,0x69,0x54,0x69,
    0x6d,0x65,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,
    0x63,0x30,0x2e,0x77,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x20,0x5f,0x34,0x32,0x5f,0x69,0x57,0x61,0x72,0x70,0x69,0x6e,0x65,0x73,0x73,0x20,
    0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x31,0x29,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x34,0x32,0x5f,
    0x69,0x52,0x61,0x74,0x69,0x6f,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,
    0x73,0x65,0x74,0x28,0x63,0x31,0x2e,0x79,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x5f,0x34,0x32,0x5f,0x69,0x5a,0x6f,0x6f,0x6d,0x20,0x3a,
    0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x31,0x2e,0x7a,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x34,0x32,
    0x5f,0x69,0x4c,0x65,0x76,0x65,0x6c,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,
    0x66,0x73,0x65,0x74,0x28,0x63,0x31,0x2e,0x77,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x3e,0x20,0x69,0x43,0x68,0x61,0x6e,0x6e,0x65,0x6c,0x31,0x20,0x3a,0x20,0x72,0x65,
    0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x30,0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,
    0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x5f,0x69,0x43,0x68,0x61,0x6e,0x6e,
    0x65,0x6c,0x31,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,
    0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x30,0x29,0x3b,0x0a,0x54,0x65,0x78,0x74,
    0x75,0x72,0x65,0x32,0x44,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,0x3e,0x20,0x69,0x43,
    0x68,0x61,0x6e,0x6e,0x65,0x6c,0x30,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,
    0x65,0x72,0x28,0x74,0x31,0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,
    0x74,0x61,0x74,0x65,0x20,0x5f,0x69,0x43,0x68,0x61,0x6e,0x6e,0x65,0x6c,0x30,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,
    0x65,0x72,0x28,0x73,0x31,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x72,0x61,0x67,0x55,0x56,0x3b,0x0a,0x73,
    0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,
    0x67,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,
    0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,
    0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,
    0x72,0x61,0x67,0x55,0x56,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,
    0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,
    0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,0x72,
    0x67,0x65,0x74,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,
    0x33,0x38,0x20,0x22,0x73,0x61,0x6d,0x70,0x6c,0x65,0x73,0x2f,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x2d,0x65,0x66,0x66,0x65,0x63,0x74,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,
    0x66,0x6c,0x6f,0x61,0x74,0x20,0x6e,0x6f,0x69,0x73,0x65,0x28,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x70,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x38,
    0x20,0x22,0x73,0x61,0x6d,0x70,0x6c,0x65,0x73,0x2f,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x2d,0x65,0x66,0x66,0x65,0x63,0x74,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x69,0x43,0x68,0x61,0x6e,0x6e,0x65,
    0x6c,0x31,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x69,0x43,0x68,0x61,0x6e,
    0x6e,0x65,0x6c,0x31,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x70,0x29,
    0x2e,0x78,0x3b,0x0a,0x7d,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x31,0x20,
    0x22,0x73,0x61,0x6d,0x70,0x6c,0x65,0x73,0x2f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x2d,
    0x65,0x66,0x66,0x65,0x63,0x74,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x31,0x20,0x22,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x73,0x2f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x2d,0x65,0x66,0x66,0x65,0x63,0x74,0x2e,
    0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x5f,0x35,0x34,0x20,0x3d,0x20,0x28,0x66,0x72,0x61,0x67,0x55,0x56,0x20,0x2a,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x5f,0x34,0x32,0x5f,0x69,0x52,0x61,0x74,
    0x69,0x6f,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x29,0x20,0x2a,0x20,0x5f,0x34,0x32,
    0x5f,0x69,0x5a,0x6f,0x6f,0x6d,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x5f,0x35,0x34,0x20,0x2d,
    0x20,0x28,0x5f,0x34,0x32,0x5f,0x69,0x56,0x65,0x6c,0x6f,0x63,0x69,0x74,0x79,0x20,
    0x2a,0x20,0x5f,0x34,0x32,0x5f,0x69,0x54,0x69,0x6d,0x65,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,
    0x20,0x3d,0x20,0x5f,0x35,0x34,0x20,0x2b,0x20,0x28,0x6e,0x6f,0x69,0x73,0x65,0x28,
    0x70,0x61,0x72,0x61,0x6d,0x29,0x20,0x2a,0x20,0x5f,0x34,0x32,0x5f,0x69,0x57,0x61,
    0x72,0x70,0x69,0x6e,0x65,0x73,0x73,0x29,0x2e,0x78,0x78,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x28,0x6c,0x65,0x72,0x70,0x28,0x69,0x43,0x68,0x61,0x6e,0x6e,0x65,
    0x6c,0x30,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x69,0x43,0x68,0x61,0x6e,
    0x6e,0x65,0x6c,0x30,0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x66,0x72,
    0x61,0x67,0x55,0x56,0x29,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x6e,0x6f,0x69,0x73,0x65,
    0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x29,0x2e,0x78,0x78,0x78,0x2c,0x20,0x5f,
    0x34,0x32,0x5f,0x69,0x50,0x72,0x65,0x73,0x73,0x75,0x72,0x65,0x2e,0x78,0x78,0x78,
    0x29,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,
    0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,
    0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,
    0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x55,0x56,
    0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x66,
    0x72,0x61,0x67,0x55,0x56,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,
    0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,
    0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x72,
    0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,
    0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,
    0x00,
};
/*
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct main0_out
    {
        float2 fragUV [[user(locn0)]];
        float4 gl_Position [[position]];
    };
    
    struct main0_in
    {
        float4 coord [[attribute(0)]];
    };
    
    #line 9 "samples/sample-effect.glsl"
    vertex main0_out main0(main0_in in [[stage_in]])
    {
        main0_out out = {};
    #line 9 "samples/sample-effect.glsl"
        out.gl_Position = float4(in.coord.xy, 0.0, 1.0);
        out.fragUV = in.coord.zw;
        return out;
    }
    
*/
static const char effect_vs_source_metal_macos[476] = {
    0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,
    0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,
    0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,
    0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,
    0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,
    0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x72,0x61,0x67,0x55,0x56,0x20,0x5b,0x5b,0x75,
    0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,
    0x74,0x69,0x6f,0x6e,0x20,0x5b,0x5b,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x5d,
    0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,
    0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x20,0x63,0x6f,0x6f,0x72,0x64,0x20,0x5b,0x5b,0x61,0x74,0x74,0x72,
    0x69,0x62,0x75,0x74,0x65,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x39,0x20,0x22,0x73,0x61,0x6d,0x70,0x6c,0x65,0x73,
    0x2f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x2d,0x65,0x66,0x66,0x65,0x63,0x74,0x2e,0x67,
    0x6c,0x73,0x6c,0x22,0x0a,0x76,0x65,0x72,0x74,0x65,0x78,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x28,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x69,0x6e,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,0x3d,0x20,0x7b,0x7d,0x3b,0x0a,
    0x23,0x6c,0x69,0x6e,0x65,0x20,0x39,0x20,0x22,0x73,0x61,0x6d,0x70,0x6c,0x65,0x73,
    0x2f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x2d,0x65,0x66,0x66,0x65,0x63,0x74,0x2e,0x67,
    0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x67,0x6c,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x28,0x69,0x6e,0x2e,0x63,0x6f,0x6f,0x72,0x64,0x2e,0x78,0x79,0x2c,0x20,0x30,
    0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,
    0x74,0x2e,0x66,0x72,0x61,0x67,0x55,0x56,0x20,0x3d,0x20,0x69,0x6e,0x2e,0x63,0x6f,
    0x6f,0x72,0x64,0x2e,0x7a,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,
    0x72,0x6e,0x20,0x6f,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #pragma clang diagnostic ignored "-Wmissing-prototypes"
    
    #include <metal_stdlib>
    #include <simd/simd.h>
    
    using namespace metal;
    
    struct effect_uniform
    {
        float2 iVelocity;
        float iPressure;
        float iTime;
        float iWarpiness;
        float iRatio;
        float iZoom;
        float iLevel;
    };
    
    struct main0_out
    {
        float4 fragColor [[color(0)]];
    };
    
    struct main0_in
    {
        float2 fragUV [[user(locn0)]];
    };
    
    #line 38 "samples/sample-effect.glsl"
    static inline __attribute__((always_inline))
    float noise(thread const float2& p, thread texture2d<float> iChannel1, thread const sampler iChannel1Smplr)
    {
    #line 38 "samples/sample-effect.glsl"
        return iChannel1.sample(iChannel1Smplr, p).x;
    }
    
    #line 41 "samples/sample-effect.glsl"
    fragment main0_out main0(main0_in in [[stage_in]], constant effect_uniform& _42 [[buffer(0)]], texture2d<float> iChannel1 [[texture(0)]], texture2d<float> iChannel0 [[texture(1)]], sampler iChannel1Smplr [[sampler(0)]], sampler iChannel0Smplr [[sampler(1)]])
    {
        main0_out out = {};
    #line 41 "samples/sample-effect.glsl"
        float2 _54 = (in.fragUV * float2(_42.iRatio, 1.0)) * _42.iZoom;
        float2 param = _54 - (_42.iVelocity * _42.iTime);
        float2 param_1 = _54 + float2(noise(param, iChannel1, iChannel1Smplr) * _42.iWarpiness);
        out.fragColor = float4(mix(iChannel0.sample(iChannel0Smplr, in.fragUV).xyz, float3(noise(param_1, iChannel1, iChannel1Smplr)), float3(_42.iPressure)), 1.0);
        return out;
    }
    
*/
static const char effect_fs_source_metal_macos[1448] = {
    0x23,0x70,0x72,0x61,0x67,0x6d,0x61,0x20,0x63,0x6c,0x61,0x6e,0x67,0x20,0x64,0x69,
    0x61,0x67,0x6e,0x6f,0x73,0x74,0x69,0x63,0x20,0x69,0x67,0x6e,0x6f,0x72,0x65,0x64,
    0x20,0x22,0x2d,0x57,0x6d,0x69,0x73,0x73,0x69,0x6e,0x67,0x2d,0x70,0x72,0x6f,0x74,
    0x6f,0x74,0x79,0x70,0x65,0x73,0x22,0x0a,0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,
    0x65,0x20,0x3c,0x6d,0x65,0x74,0x61,0x6c,0x5f,0x73,0x74,0x64,0x6c,0x69,0x62,0x3e,
    0x0a,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x3c,0x73,0x69,0x6d,0x64,0x2f,
    0x73,0x69,0x6d,0x64,0x2e,0x68,0x3e,0x0a,0x0a,0x75,0x73,0x69,0x6e,0x67,0x20,0x6e,
    0x61,0x6d,0x65,0x73,0x70,0x61,0x63,0x65,0x20,0x6d,0x65,0x74,0x61,0x6c,0x3b,0x0a,
    0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x65,0x66,0x66,0x65,0x63,0x74,0x5f,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x20,0x69,0x56,0x65,0x6c,0x6f,0x63,0x69,0x74,0x79,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x69,0x50,0x72,0x65,0x73,0x73,0x75,
    0x72,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x69,0x54,
    0x69,0x6d,0x65,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x69,
    0x57,0x61,0x72,0x70,0x69,0x6e,0x65,0x73,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x69,0x52,0x61,0x74,0x69,0x6f,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x69,0x5a,0x6f,0x6f,0x6d,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x69,0x4c,0x65,0x76,0x65,0x6c,0x3b,0x0a,
    0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,
    0x5f,0x6f,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x66,0x72,0x61,0x67,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x5b,0x5b,0x63,0x6f,
    0x6c,0x6f,0x72,0x28,0x30,0x29,0x5d,0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x72,0x61,0x67,0x55,
    0x56,0x20,0x5b,0x5b,0x75,0x73,0x65,0x72,0x28,0x6c,0x6f,0x63,0x6e,0x30,0x29,0x5d,
    0x5d,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x38,0x20,
    0x22,0x73,0x61,0x6d,0x70,0x6c,0x65,0x73,0x2f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x2d,
    0x65,0x66,0x66,0x65,0x63,0x74,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x73,0x74,0x61,
    0x74,0x69,0x63,0x20,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x20,0x5f,0x5f,0x61,0x74,0x74,
    0x72,0x69,0x62,0x75,0x74,0x65,0x5f,0x5f,0x28,0x28,0x61,0x6c,0x77,0x61,0x79,0x73,
    0x5f,0x69,0x6e,0x6c,0x69,0x6e,0x65,0x29,0x29,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x6e,0x6f,0x69,0x73,0x65,0x28,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,
    0x73,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x26,0x20,0x70,0x2c,0x20,0x74,0x68,
    0x72,0x65,0x61,0x64,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,
    0x6c,0x6f,0x61,0x74,0x3e,0x20,0x69,0x43,0x68,0x61,0x6e,0x6e,0x65,0x6c,0x31,0x2c,
    0x20,0x74,0x68,0x72,0x65,0x61,0x64,0x20,0x63,0x6f,0x6e,0x73,0x74,0x20,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x20,0x69,0x43,0x68,0x61,0x6e,0x6e,0x65,0x6c,0x31,0x53,
    0x6d,0x70,0x6c,0x72,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x38,
    0x20,0x22,0x73,0x61,0x6d,0x70,0x6c,0x65,0x73,0x2f,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x2d,0x65,0x66,0x66,0x65,0x63,0x74,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x69,0x43,0x68,0x61,0x6e,0x6e,0x65,
    0x6c,0x31,0x2e,0x73,0x61,0x6d,0x70,0x6c,0x65,0x28,0x69,0x43,0x68,0x61,0x6e,0x6e,
    0x65,0x6c,0x31,0x53,0x6d,0x70,0x6c,0x72,0x2c,0x20,0x70,0x29,0x2e,0x78,0x3b,0x0a,
    0x7d,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x31,0x20,0x22,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x73,0x2f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x2d,0x65,0x66,0x66,0x65,
    0x63,0x74,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x66,0x72,0x61,0x67,0x6d,0x65,0x6e,
    0x74,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,
    0x30,0x28,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x69,0x6e,0x20,0x69,0x6e,0x20,0x5b,0x5b,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x5d,0x5d,0x2c,0x20,0x63,0x6f,0x6e,0x73,
    0x74,0x61,0x6e,0x74,0x20,0x65,0x66,0x66,0x65,0x63,0x74,0x5f,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x26,0x20,0x5f,0x34,0x32,0x20,0x5b,0x5b,0x62,0x75,0x66,0x66,0x65,
    0x72,0x28,0x30,0x29,0x5d,0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,
    0x64,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x3e,0x20,0x69,0x43,0x68,0x61,0x6e,0x6e,0x65,
    0x6c,0x31,0x20,0x5b,0x5b,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x30,0x29,0x5d,
    0x5d,0x2c,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x64,0x3c,0x66,0x6c,0x6f,
    0x61,0x74,0x3e,0x20,0x69,0x43,0x68,0x61,0x6e,0x6e,0x65,0x6c,0x30,0x20,0x5b,0x5b,
    0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x31,0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x20,0x69,0x43,0x68,0x61,0x6e,0x6e,0x65,0x6c,0x31,0x53,
    0x6d,0x70,0x6c,0x72,0x20,0x5b,0x5b,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x28,0x30,
    0x29,0x5d,0x5d,0x2c,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x69,0x43,0x68,
    0x61,0x6e,0x6e,0x65,0x6c,0x30,0x53,0x6d,0x70,0x6c,0x72,0x20,0x5b,0x5b,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x28,0x31,0x29,0x5d,0x5d,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x6d,0x61,0x69,0x6e,0x30,0x5f,0x6f,0x75,0x74,0x20,0x6f,0x75,0x74,0x20,
    0x3d,0x20,0x7b,0x7d,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x31,0x20,0x22,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x73,0x2f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x2d,0x65,
    0x66,0x66,0x65,0x63,0x74,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x5f,0x35,0x34,0x20,0x3d,0x20,0x28,0x69,0x6e,
    0x2e,0x66,0x72,0x61,0x67,0x55,0x56,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x28,0x5f,0x34,0x32,0x2e,0x69,0x52,0x61,0x74,0x69,0x6f,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x29,0x20,0x2a,0x20,0x5f,0x34,0x32,0x2e,0x69,0x5a,0x6f,0x6f,0x6d,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x20,0x3d,0x20,0x5f,0x35,0x34,0x20,0x2d,0x20,0x28,0x5f,0x34,0x32,0x2e,0x69,0x56,
    0x65,0x6c,0x6f,0x63,0x69,0x74,0x79,0x20,0x2a,0x20,0x5f,0x34,0x32,0x2e,0x69,0x54,
    0x69,0x6d,0x65,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,0x3d,0x20,0x5f,0x35,0x34,0x20,0x2b,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x6e,0x6f,0x69,0x73,0x65,0x28,0x70,0x61,
    0x72,0x61,0x6d,0x2c,0x20,0x69,0x43,0x68,0x61,0x6e,0x6e,0x65,0x6c,0x31,0x2c,0x20,
    0x69,0x43,0x68,0x61,0x6e,0x6e,0x65,0x6c,0x31,0x53,0x6d,0x70,0x6c,0x72,0x29,0x20,
    0x2a,0x20,0x5f,0x34,0x32,0x2e,0x69,0x57,0x61,0x72,0x70,0x69,0x6e,0x65,0x73,0x73,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x43,
    0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x6d,0x69,
    0x78,0x28,0x69,0x43,0x68,0x61,0x6e,0x6e,0x65,0x6c,0x30,0x2e,0x73,0x61,0x6d,0x70,
    0x6c,0x65,0x28,0x69,0x43,0x68,0x61,0x6e,0x6e,0x65,0x6c,0x30,0x53,0x6d,0x70,0x6c,
    0x72,0x2c,0x20,0x69,0x6e,0x2e,0x66,0x72,0x61,0x67,0x55,0x56,0x29,0x2e,0x78,0x79,
    0x7a,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x6e,0x6f,0x69,0x73,0x65,0x28,
    0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x69,0x43,0x68,0x61,0x6e,0x6e,0x65,
    0x6c,0x31,0x2c,0x20,0x69,0x43,0x68,0x61,0x6e,0x6e,0x65,0x6c,0x31,0x53,0x6d,0x70,
    0x6c,0x72,0x29,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x28,0x5f,0x34,0x32,
    0x2e,0x69,0x50,0x72,0x65,0x73,0x73,0x75,0x72,0x65,0x29,0x29,0x2c,0x20,0x31,0x2e,
    0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,
    0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
const sg_shader_desc* effect_shader_desc(sg_backend backend) {
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "coord";
      desc.vs.source = effect_vs_source_glsl330;
      desc.vs.entry = "main";
      desc.fs.source = effect_fs_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.uniform_blocks[0].uniforms[0].name = "effect_uniform";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 2;
      desc.fs.images[0].name = "iChannel1";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "iChannel0";
      desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "effect_shader";
    };
    return &desc;
  }
  if (backend == SG_BACKEND_GLES2) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "coord";
      desc.vs.source = effect_vs_source_glsl100;
      desc.vs.entry = "main";
      desc.fs.source = effect_fs_source_glsl100;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.uniform_blocks[0].uniforms[0].name = "effect_uniform";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 2;
      desc.fs.images[0].name = "iChannel1";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "iChannel0";
      desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "effect_shader";
    };
    return &desc;
  }
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "coord";
      desc.vs.source = effect_vs_source_glsl300es;
      desc.vs.entry = "main";
      desc.fs.source = effect_fs_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.uniform_blocks[0].uniforms[0].name = "effect_uniform";
      desc.fs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.fs.uniform_blocks[0].uniforms[0].array_count = 2;
      desc.fs.images[0].name = "iChannel1";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "iChannel0";
      desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "effect_shader";
    };
    return &desc;
  }
  if (backend == SG_BACKEND_D3D11) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].sem_name = "TEXCOORD";
      desc.attrs[0].sem_index = 0;
      desc.vs.source = effect_vs_source_hlsl4;
      desc.vs.d3d11_target = "vs_4_0";
      desc.vs.entry = "main";
      desc.fs.source = effect_fs_source_hlsl4;
      desc.fs.d3d11_target = "ps_4_0";
      desc.fs.entry = "main";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.images[0].name = "iChannel1";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "iChannel0";
      desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "effect_shader";
    };
    return &desc;
  }
  if (backend == SG_BACKEND_METAL_MACOS) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.vs.source = effect_vs_source_metal_macos;
      desc.vs.entry = "main0";
      desc.fs.source = effect_fs_source_metal_macos;
      desc.fs.entry = "main0";
      desc.fs.uniform_blocks[0].size = 32;
      desc.fs.images[0].name = "iChannel1";
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.fs.images[1].name = "iChannel0";
      desc.fs.images[1].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[1].sampler_type = SG_SAMPLERTYPE_FLOAT;
      desc.label = "effect_shader";
    };
    return &desc;
  }
  return 0;
}
#endif /* SOKOL_SHDC_IMPL */
